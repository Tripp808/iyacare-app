import { ethers } from 'ethers';
import { Patient } from '@/services/patient.service';
import CryptoJS from 'crypto-js';

// Smart contract ABI (Application Binary Interface)
const PATIENT_DATA_STORAGE_ABI = [
  "function storePatientData(string patientId, string encryptedData, bytes32 dataHash) external",
  "function getPatientData(string patientId) external view returns (string, bytes32, uint256, address)",
  "function verifyDataIntegrity(string patientId, bytes32 originalHash) external view returns (bool)",
  "function getAccessLogs(string patientId, uint256 offset, uint256 limit) external view returns (tuple(address accessor, uint256 timestamp, string accessType, bool authorized)[])",
  "function getTotalPatients() external view returns (uint256)",
  "function getAllPatientIds() external view returns (string[])",
  "function authorizeProvider(address provider) external",
  "function isAuthorizedProvider(address provider) external view returns (bool)",
  "function hasRole(bytes32 role, address account) external view returns (bool)",
  "event PatientDataStored(string indexed patientId, address indexed provider, uint256 timestamp)",
  "event PatientDataAccessed(string indexed patientId, address indexed accessor, string accessType)"
];

interface BlockchainConfig {
  rpcUrl: string;
  contractAddress: string;
  networkId: number;
  privateKey?: string;
}

interface Web3AccessLog {
  accessor: string;
  timestamp: number;
  accessType: string;
  authorized: boolean;
}

interface Web3BlockchainStats {
  totalPatients: number;
  encryptedRecords: number;
  lastActivity: number | null;
  isConnected: boolean;
  networkInfo: {
    name: string;
    isTestnet: boolean;
    rpcUrl: string;
    chainId: number;
  };
}

class Web3BlockchainService {
  private static instance: Web3BlockchainService;
  private provider: ethers.JsonRpcProvider | null = null;
  private contract: ethers.Contract | null = null;
  private signer: ethers.Wallet | ethers.JsonRpcSigner | null = null;
  private config: BlockchainConfig | null = null;
  private isInitialized = false;

  private constructor() {}

  static getInstance(): Web3BlockchainService {
    if (!Web3BlockchainService.instance) {
      Web3BlockchainService.instance = new Web3BlockchainService();
    }
    return Web3BlockchainService.instance;
  }

  /**
   * Initialize the Web3 connection with configuration
   */
  async initialize(config?: BlockchainConfig): Promise<{ success: boolean; error?: string }> {
    try {
      // Use provided config or environment variables
      this.config = config || {
        rpcUrl: process.env.NEXT_PUBLIC_SEPOLIA_RPC_URL || process.env.SEPOLIA_RPC_URL || 'https://eth-sepolia.g.alchemy.com/v2/demo',
        contractAddress: process.env.NEXT_PUBLIC_SEPOLIA_CONTRACT_ADDRESS || '',
        networkId: parseInt(process.env.NEXT_PUBLIC_NETWORK_ID || '11155111'),
        privateKey: process.env.PRIVATE_KEY
      };

      // Contract address is optional - service can work in fallback mode
      if (!this.config.contractAddress) {
        console.log('‚ö†Ô∏è No contract address configured - running in fallback mode with local encrypted storage');
      }

      if (!this.config.rpcUrl || this.config.rpcUrl.includes('demo')) {
        return { 
          success: false, 
          error: 'RPC URL not configured. Please set SEPOLIA_RPC_URL in your .env.local file with your Alchemy or Infura endpoint.' 
        };
      }

      // Initialize provider
      this.provider = new ethers.JsonRpcProvider(this.config.rpcUrl);
      
      // Test connection
      await this.provider.getNetwork();

      // Initialize contract (read-only first)
      this.contract = new ethers.Contract(
        this.config.contractAddress,
        PATIENT_DATA_STORAGE_ABI,
        this.provider
      ) as any;

      // Try to connect MetaMask first, then fallback to private key
      try {
        if (typeof window !== 'undefined' && window.ethereum) {
          console.log('ü¶ä MetaMask detected, attempting connection...');
          const browserProvider = new ethers.BrowserProvider(window.ethereum);
          
          // Request account access
          await browserProvider.send('eth_requestAccounts', []);
          
          // Check current network
          const currentNetwork = await browserProvider.getNetwork();
          console.log('üåê Current MetaMask network:', currentNetwork.name, 'Chain ID:', currentNetwork.chainId);
          
          // Verify we're on Sepolia (Chain ID: 11155111)
          if (Number(currentNetwork.chainId) !== 11155111) {
            console.log('‚ö†Ô∏è MetaMask is not on Sepolia testnet, attempting to switch...');
            
            try {
              // Try to switch to Sepolia
              await window.ethereum.request({
                method: 'wallet_switchEthereumChain',
                params: [{ chainId: '0xaa36a7' }], // 11155111 in hex
              });
              console.log('‚úÖ Successfully switched to Sepolia testnet');
            } catch (switchError: any) {
              // If Sepolia is not added, add it
              if (switchError.code === 4902) {
                console.log('üîó Adding Sepolia testnet to MetaMask...');
                await window.ethereum.request({
                  method: 'wallet_addEthereumChain',
                  params: [{
                    chainId: '0xaa36a7',
                    chainName: 'Sepolia Testnet',
                    nativeCurrency: {
                      name: 'ETH',
                      symbol: 'ETH',
                      decimals: 18
                    },
                    rpcUrls: [this.config.rpcUrl],
                    blockExplorerUrls: ['https://sepolia.etherscan.io']
                  }]
                });
                console.log('‚úÖ Sepolia testnet added to MetaMask');
              } else {
                console.error('‚ùå Failed to switch network:', switchError);
                console.log('üìù Network switch failed - continuing with current network');
                console.log('‚ö†Ô∏è WARNING: You are not on Sepolia testnet. Transactions may fail or cost real money!');
                // Don't throw error - let user continue but warn them
              }
            }
          }
          
          this.signer = await browserProvider.getSigner();
          
          if (this.contract) {
            this.contract = this.contract.connect(this.signer) as any;
          }
          console.log('‚úÖ MetaMask connected for transactions');
        } else if (this.config.privateKey && this.config.privateKey !== 'your_metamask_private_key_here') {
          console.log('üîë Using private key for transactions...');
          this.signer = new ethers.Wallet(this.config.privateKey, this.provider);
          if (this.contract) {
            this.contract = this.contract.connect(this.signer) as any;
          }
          console.log('‚úÖ Private key signer connected');
        } else {
          console.log('‚ö†Ô∏è No signer available - read-only mode');
        }
      } catch (error) {
        console.error('‚ùå Failed to setup signer:', error);
        console.log('‚ö†Ô∏è Running in read-only mode');
      }

      this.isInitialized = true;
      console.log('‚úÖ Web3 Blockchain Service initialized successfully');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Failed to initialize Web3 Blockchain Service:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown initialization error' 
      };
    }
  }

  /**
   * Connect to user's wallet (MetaMask)
   */
  async connectWallet(): Promise<{ success: boolean; address?: string; error?: string }> {
    try {
      if (typeof window === 'undefined' || !window.ethereum) {
        return { success: false, error: 'MetaMask not detected. Please install MetaMask.' };
      }

      // Request account access
      const accounts = await window.ethereum.request({ 
        method: 'eth_requestAccounts' 
      });

      if (!accounts || accounts.length === 0) {
        return { success: false, error: 'No accounts found. Please unlock MetaMask.' };
      }

      // Create provider from MetaMask
      const web3Provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await web3Provider.getSigner();
      const address = await signer.getAddress();

      // Update contract with signer
      if (this.contract && this.config) {
        this.contract = new ethers.Contract(
          this.config.contractAddress,
          PATIENT_DATA_STORAGE_ABI,
          signer
        ) as any;
      }

      console.log('‚úÖ Wallet connected:', address);
      return { success: true, address };

    } catch (error) {
      console.error('‚ùå Failed to connect wallet:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Failed to connect wallet' 
      };
    }
  }

  /**
   * Store encrypted patient data on blockchain
   */
  async storePatientData(patient: Patient, accessLevel: string = 'confidential'): Promise<{ success: boolean; txHash?: string; error?: string }> {
    try {
      if (!this.isInitialized || !this.contract) {
        const initResult = await this.initialize();
        if (!initResult.success) {
          return { success: false, error: initResult.error };
        }
      }

      // Encrypt patient data
      const encryptedData = await this.encryptPatientData(patient);
      const dataHash = ethers.keccak256(ethers.toUtf8Bytes(JSON.stringify(patient)));

      // Store on blockchain
      const tx = await (this.contract as any).storePatientData(
        patient.id!,
        encryptedData,
        dataHash
      );

      console.log('‚è≥ Transaction submitted:', tx.hash);
      
      // Wait for confirmation
      const receipt = await tx.wait();
      console.log('‚úÖ Transaction confirmed in block:', receipt.blockNumber);

      return { success: true, txHash: tx.hash };

    } catch (error) {
      console.error('‚ùå Failed to store patient data:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Failed to store data' 
      };
    }
  }

  /**
   * Retrieve and decrypt patient data from blockchain
   */
  async getPatientData(patientId: string): Promise<{ success: boolean; patient?: Patient; error?: string }> {
    try {
      if (!this.isInitialized || !this.contract) {
        const initResult = await this.initialize();
        if (!initResult.success) {
          return { success: false, error: initResult.error };
        }
      }

      // Get data from blockchain
      const [encryptedData, dataHash, timestamp, version] = await (this.contract as any).getPatientData(patientId);

      // Decrypt patient data
      const patient = await this.decryptPatientData(encryptedData);

      return { success: true, patient };

    } catch (error) {
      console.error('‚ùå Failed to retrieve patient data:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Failed to retrieve data' 
      };
    }
  }

  /**
   * Authorize current wallet as healthcare provider
   */
  async authorizeProvider(): Promise<{ success: boolean; error?: string; txHash?: string }> {
    try {
      console.log('üîç Authorization check - isInitialized:', this.isInitialized);
      console.log('üîç Authorization check - contract:', !!this.contract);
      console.log('üîç Authorization check - signer:', !!this.signer);
      
      if (!this.isInitialized) {
        console.log('‚ùå Blockchain service not initialized, attempting to initialize...');
        const initResult = await this.initialize();
        if (!initResult.success) {
          return { success: false, error: `Initialization failed: ${initResult.error}` };
        }
      }
      
      if (!this.contract) {
        return { success: false, error: 'Smart contract not available. Please check your contract address configuration.' };
      }
      
      if (!this.signer) {
        return { success: false, error: 'No wallet signer available. Please connect your wallet first.' };
      }

      console.log('üîê Authorizing wallet as healthcare provider...');
      const signerAddress = await this.signer.getAddress();
      console.log('üíº Wallet address to authorize:', signerAddress);

      // Call authorizeProvider function on the contract
      const tx = await (this.contract as any).authorizeProvider(signerAddress);
      console.log('‚è≥ Authorization transaction sent:', tx.hash);
      
      // Wait for transaction confirmation
      const receipt = await tx.wait();
      console.log('‚úÖ Authorization confirmed in block:', receipt.blockNumber);

      return {
        success: true,
        txHash: tx.hash
      };

    } catch (error: any) {
      console.error('‚ùå Failed to authorize provider:', error);
      return {
        success: false,
        error: error.message || 'Failed to authorize provider'
      };
    }
  }

  /**
   * Check if current wallet is authorized as healthcare provider
   */
  async isAuthorizedProvider(): Promise<{ success: boolean; authorized: boolean; error?: string }> {
    try {
      if (!this.isInitialized || !this.contract || !this.signer) {
        return { success: false, authorized: false, error: 'Blockchain service not initialized' };
      }

      const signerAddress = await this.signer.getAddress();
      console.log('üîç Checking authorization for:', signerAddress);
      
      const isAuthorized = await (this.contract as any).isAuthorizedProvider(signerAddress);
      console.log('üìä Authorization status:', isAuthorized);

      return {
        success: true,
        authorized: isAuthorized
      };

    } catch (error: any) {
      console.error('‚ùå Failed to check authorization:', error);
      return {
        success: false,
        authorized: false,
        error: error.message || 'Failed to check authorization'
      };
    }
  }

  /**
   * Get stored patient IDs from local storage
   */
  getStoredPatientIds(): string[] {
    try {
      const stored = localStorage.getItem('blockchain_patient_ids');
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      console.error('Failed to get stored patient IDs:', error);
      return [];
    }
  }

  /**
   * Verify data integrity
   */
  async verifyDataIntegrity(patientId: string, originalData: Patient): Promise<{ success: boolean; isValid?: boolean; error?: string }> {
    try {
      if (!this.isInitialized || !this.contract) {
        const initResult = await this.initialize();
        if (!initResult.success) {
          return { success: false, error: initResult.error };
        }
      }

      const dataHash = ethers.keccak256(ethers.toUtf8Bytes(JSON.stringify(originalData)));
      const isValid = await (this.contract as any).verifyDataIntegrity(patientId, dataHash);

      return { success: true, isValid };

    } catch (error) {
      console.error('‚ùå Failed to verify data integrity:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Failed to verify integrity' 
      };
    }
  }



  /**
   * Check if the current wallet has admin role
   */
  async isAdmin(): Promise<{ success: boolean; isAdmin?: boolean; error?: string }> {
    try {
      if (!this.isInitialized || !this.contract) {
        const initResult = await this.initialize();
        if (!initResult.success) {
          return { success: false, error: initResult.error };
        }
      }

      const DEFAULT_ADMIN_ROLE = '0x0000000000000000000000000000000000000000000000000000000000000000';
      const walletAddress = await (this.signer as any).getAddress();
      const hasAdminRole = await (this.contract as any).hasRole(DEFAULT_ADMIN_ROLE, walletAddress);
      
      console.log('üîç Admin check - Wallet:', walletAddress);
      console.log('üîç Admin check - Has admin role:', hasAdminRole);
      
      return { success: true, isAdmin: hasAdminRole };
    } catch (error: any) {
      console.error('Failed to check admin status:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  /**
   * Authorize a healthcare provider (admin only)
   */
  async authorizeProviderAsAdmin(providerAddress: string): Promise<{ success: boolean; error?: string; txHash?: string }> {
    try {
      if (!this.isInitialized || !this.contract || !this.signer) {
        return { success: false, error: 'Blockchain service not initialized or no signer available' };
      }

      console.log('üîê Authorizing provider as admin:', providerAddress);
      
      // Check if current wallet is admin
      const adminCheck = await this.isAdmin();
      if (!adminCheck.success || !adminCheck.isAdmin) {
        return { success: false, error: 'Current wallet does not have admin privileges. Only the contract deployer can authorize providers.' };
      }

      const tx = await (this.contract as any).authorizeProvider(providerAddress);
      console.log('üîê Authorization transaction sent:', tx.hash);
      
      const receipt = await tx.wait();
      console.log('‚úÖ Authorization confirmed:', receipt.transactionHash);
      
      return { success: true, txHash: receipt.transactionHash };
    } catch (error: any) {
      console.error('‚ùå Failed to authorize provider:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown authorization error' };
    }
  }

  /**
   * Get and decrypt patient data from blockchain with decryption key
   */
  async getDecryptedPatientData(patientId: string, decryptionKey: string): Promise<{ success: boolean; patient?: any; error?: string }> {
    try {
      if (!this.isInitialized || !this.contract) {
        const initResult = await this.initialize();
        if (!initResult.success) {
          return { success: false, error: initResult.error };
        }
      }

      console.log('üîç Retrieving encrypted patient data from blockchain...');
      
      // Get encrypted data from blockchain
      const [encryptedData, dataHash, timestamp, updatedBy] = await (this.contract as any).getPatientData(patientId);
      
      if (!encryptedData) {
        return { success: false, error: 'Patient data not found on blockchain' };
      }

      console.log('üîê Attempting to decrypt patient data...');
      
      // Decrypt the data using the provided key
      try {
        const decryptedBytes = CryptoJS.AES.decrypt(encryptedData, decryptionKey);
        const decryptedString = decryptedBytes.toString(CryptoJS.enc.Utf8);
        
        if (!decryptedString) {
          return { success: false, error: 'Invalid decryption key. Unable to decrypt patient data.' };
        }
        
        const patientData = JSON.parse(decryptedString);
        
        // Add blockchain metadata
        const enrichedData = {
          ...patientData,
          blockchainMetadata: {
            dataHash,
            timestamp: Number(timestamp),
            updatedBy,
            retrievedAt: new Date().toISOString()
          }
        };
        
        console.log('‚úÖ Patient data decrypted successfully');
        return { success: true, patient: enrichedData };
        
      } catch (decryptError) {
        console.error('‚ùå Decryption failed:', decryptError);
        return { success: false, error: 'Invalid decryption key or corrupted data' };
      }
      
    } catch (error: any) {
      console.error('‚ùå Failed to retrieve patient data:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  /**
   * Get list of all patient IDs stored on blockchain (admin only)
   */
  async getBlockchainPatientIds(): Promise<{ success: boolean; patientIds?: string[]; error?: string }> {
    try {
      if (!this.isInitialized || !this.contract) {
        const initResult = await this.initialize();
        if (!initResult.success) {
          return { success: false, error: initResult.error };
        }
      }

      // Check if user is admin
      const adminCheck = await this.isAdmin();
      if (!adminCheck.success || !adminCheck.isAdmin) {
        return { success: false, error: 'Admin privileges required to view all patient IDs' };
      }

      const patientIds = await (this.contract as any).getAllPatientIds();
      return { success: true, patientIds };
      
    } catch (error: any) {
      console.error('‚ùå Failed to get patient IDs:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  /**
   * Get access logs for a patient
   */
  async getAccessLogs(patientId: string): Promise<Web3AccessLog[]> {
    try {
      if (!this.isInitialized || !this.contract) {
        const initResult = await this.initialize();
        if (!initResult.success) {
          return [];
        }
      }

      const logs = await (this.contract as any).getAccessLogs(patientId, 0, 100);
      return logs.map((log: any) => ({
        accessor: log.accessor,
        timestamp: Number(log.timestamp),
        accessType: log.accessType,
        authorized: log.authorized
      }));
    } catch (error) {
      console.error('Failed to get access logs:', error);
      return [];
    }
  }

  /**
   * Get blockchain statistics
   */
  async getBlockchainStats(): Promise<Web3BlockchainStats> {
    try {
      if (!this.isInitialized || !this.contract) {
        await this.initialize();
      }

      let totalPatients = 0;
      
      if (this.contract && this.config?.contractAddress) {
        try {
          console.log('üîç Verifying contract at:', this.config.contractAddress);
          
          // First, check if there's code at the contract address
          const code = await this.provider!.getCode(this.config.contractAddress);
          console.log('üìù Contract code length:', code.length);
          
          if (code === '0x') {
            console.error('‚ùå No contract found at address:', this.config.contractAddress);
            throw new Error('No contract deployed at the specified address');
          }
          
          console.log('‚úÖ Contract found, calling getTotalPatients...');
          totalPatients = await (this.contract as any).getTotalPatients();
          console.log('üìä Total patients from contract:', totalPatients);
          
        } catch (contractError: any) {
          console.error('‚ùå Contract call failed:', contractError.message);
          console.log('‚ö†Ô∏è Falling back to local storage count...');
          
          // Fallback to local storage count
          const localPatients = this.getStoredPatientIds();
          totalPatients = localPatients.length;
          console.log('üíæ Local storage patient count:', totalPatients);
        }
      }
      const network = this.provider ? await this.provider.getNetwork() : null;

      return {
        totalPatients: Number(totalPatients),
        encryptedRecords: Number(totalPatients), // Same as total patients for now
        lastActivity: Date.now(),
        isConnected: this.isInitialized,
        networkInfo: {
          name: this.config?.networkId === 11155111 ? 'Sepolia Testnet' : 'Unknown Network',
          isTestnet: true,
          rpcUrl: this.config?.rpcUrl || '',
          chainId: Number(network?.chainId) || 0
        }
      };

    } catch (error) {
      console.error('‚ùå Failed to get blockchain stats:', error);
      return {
        totalPatients: 0,
        encryptedRecords: 0,
        lastActivity: null,
        isConnected: false,
        networkInfo: {
          name: 'Disconnected',
          isTestnet: false,
          rpcUrl: '',
          chainId: 0
        }
      };
    }
  }

  /**
   * Encrypt patient data using AES-256
   */
  private async encryptPatientData(patient: Patient): Promise<string> {
    try {
      const patientJson = JSON.stringify(patient);
      const encryptionKey = this.getEncryptionKey();
      const encrypted = CryptoJS.AES.encrypt(patientJson, encryptionKey).toString();
      return encrypted;
    } catch (error) {
      throw new Error('Failed to encrypt patient data');
    }
  }

  /**
   * Decrypt patient data
   */
  private async decryptPatientData(encryptedData: string): Promise<Patient> {
    try {
      const encryptionKey = this.getEncryptionKey();
      const decryptedBytes = CryptoJS.AES.decrypt(encryptedData, encryptionKey);
      const decryptedString = decryptedBytes.toString(CryptoJS.enc.Utf8);
      
      if (!decryptedString) {
        throw new Error('Invalid encryption key or corrupted data');
      }
      
      return JSON.parse(decryptedString);
    } catch (error) {
      throw new Error('Failed to decrypt patient data');
    }
  }

  /**
   * Get encryption key for patient data
   */
  private getEncryptionKey(): string {
    // In production, this should be securely managed
    return process.env.NEXT_PUBLIC_ENCRYPTION_KEY || 'iyacare-default-encryption-key-2024';
  }

  /**
   * Check if the service is properly configured
   */
  isConfigured(): boolean {
    return this.isInitialized && this.contract !== null;
  }

  /**
   * Get network information
   */
  getNetworkInfo() {
    return {
      name: this.config?.networkId === 11155111 ? 'Sepolia Testnet' : 'Unknown Network',
      isTestnet: true,
      rpcUrl: this.config?.rpcUrl || '',
      chainId: this.config?.networkId || 0
    };
  }
}

// Type declaration for MetaMask
declare global {
  interface Window {
    ethereum?: any;
  }
}

export default Web3BlockchainService;
export { Web3BlockchainService }; 